package MotoPHPayrollSystem.java;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Scanner;

public class motorPHcvsvFile {
    public static void main(String[] args) {    
        try (Scanner scanner = new Scanner(System.in)) {
            boolean continueSearching = true;
            while (continueSearching) {
                // User Authentication
               
                    boolean continueEmployeeSearch = true;
                    while (continueEmployeeSearch) {
                         System.out.print("Enter Username: ");
                         String username = scanner.nextLine();
                         System.out.print("Enter Password: ");
                         String password = scanner.nextLine();
                        System.out.print("Enter Employee Number: ");
                        String employeeId = scanner.nextLine();

                        String employeeDetails = getEmployeeDetails(employeeId);

                        if (!employeeDetails.isEmpty()) {
                            displayEmployeeDetails(employeeDetails);
                            continueEmployeeSearch = false; // Exit the loop if employee details are found
                        } else {
                            System.out.println("No data found for that employee. Do you want to try again? (yes/no)");
                            String tryAgain = scanner.nextLine();
                            if (!tryAgain.equalsIgnoreCase("yes")) {
                                continueEmployeeSearch = false; // Exit the loop if user chooses not to try again
                            }
                        }
                    }
             
                }

                // Ask if the user wants to try again
                System.out.println("Do you want to search for another employee? (yes/no)");
                String tryAgain = scanner.nextLine();
                if (!tryAgain.equalsIgnoreCase("yes")) {
                    continueSearching = false; // Exit the loop if user chooses not to search for another employee
                }
            }
        }
private static boolean authenticateUser(String username, String password) {
        // TODO: Implement user authentication logic
        return false;
    }

    public static String getEmployeeDetails(String employeeId) {
        String path = "/Users/DELL/OneDrive/Desktop/MotorPH Employee Data - EmployeeDetails.csv";
        try (BufferedReader reader = new BufferedReader(new FileReader(path))) {
            reader.readLine(); // Skip the header row
            String line;
            while ((line = reader.readLine()) != null) {
                String[] row = line.split(",(?=([^\"]\"[^\"]\")[^\"]$)");
                if (row[0].trim().equals(employeeId)) {
                    return line.replaceAll(",(?=([^\"]\"[^\"]\")[^\"]$)", ";");
                }
            }
        } catch (Exception e) {
            System.out.println("Error reading the employee details data.");
        }
        return "";
    }

    public static void displayEmployeeDetails(String employeeDetails) {
        String[] employee = employeeDetails.split(";");
        System.out.println("Employee Number                 Name                            Birthday                        Status");
        String formattedEmployee1 = String.format("%-30s  %-30s  %-30s  %-30s",
                employee[0], employee[1] + " " + employee[2], employee[3], employee[10]);
        System.out.println(formattedEmployee1);
        System.out.println("Address");
        System.out.println(employee[4]);
        System.out.println();
        System.out.println("Position");
        System.out.println(employee[5]);
        System.out.println();
        System.out.println("Immediate Supervisor");
        System.out.println(employee[9]);
        System.out.println();
        System.out.println("Philhealth Number               TIN                             SSS                             Pag-ibig");
        String formattedEmployee2 = String.format("%-30s  %-30s  %-30s  %-30s",
                employee[6], employee[8], employee[7], employee[11]);
        System.out.println(formattedEmployee2);
    }
}
